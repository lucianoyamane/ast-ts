const ts = require('typescript');
const fs = require('fs');


const arrayInputDemo = 
[
    ts.createImportDeclaration(
      undefined,
      undefined,
      ts.createImportClause(
        undefined,
        ts.createNamedImports([ts.createImportSpecifier(
          undefined,
          ts.createIdentifier("Component")
        )]),
        false
      ),
      ts.createStringLiteral("@angular/core")
    ),
    ts.createImportDeclaration(
      undefined,
      undefined,
      ts.createImportClause(
        undefined,
        ts.createNamedImports([ts.createImportSpecifier(
          undefined,
          ts.createIdentifier("MensagemService")
        )]),
        false
      ),
      ts.createStringLiteral("solidkore-lib")
    ),
    ts.createImportDeclaration(
      undefined,
      undefined,
      ts.createImportClause(
        undefined,
        ts.createNamedImports([ts.createImportSpecifier(
          undefined,
          ts.createIdentifier("TituloPaginaService")
        )]),
        false
      ),
      ts.createStringLiteral("../pagina/titulo")
    ),
    ts.createImportDeclaration(
      undefined,
      undefined,
      ts.createImportClause(
        undefined,
        ts.createNamedImports([
          ts.createImportSpecifier(
            undefined,
            ts.createIdentifier("FormBuilder")
          ),
          ts.createImportSpecifier(
            undefined,
            ts.createIdentifier("FormGroup")
          ),
          ts.createImportSpecifier(
            undefined,
            ts.createIdentifier("Validators")
          )
        ]),
        false
      ),
      ts.createStringLiteral("@angular/forms")
    ),
    ts.createClassDeclaration(
      [ts.createDecorator(ts.createCall(
        ts.createIdentifier("Component"),
        undefined,
        [ts.createObjectLiteral(
          [ts.createPropertyAssignment(
            ts.createIdentifier("templateUrl"),
            ts.createStringLiteral("skinput.demo.html")
          )],
          true
        )]
      ))],
      [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
      ts.createIdentifier("SkInputDemo"),
      undefined,
      undefined,
      [
        ts.createProperty(
          undefined,
          [ts.createModifier(ts.SyntaxKind.PrivateKeyword)],
          ts.createIdentifier("cadastroForm"),
          undefined,
          ts.createTypeReferenceNode(
            ts.createIdentifier("FormGroup"),
            undefined
          ),
          undefined
        ),
        ts.createProperty(
          undefined,
          undefined,
          ts.createIdentifier("disabled"),
          undefined,
          ts.createKeywordTypeNode(ts.SyntaxKind.BooleanKeyword),
          undefined
        ),
        ts.createConstructor(
          undefined,
          undefined,
          [
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PrivateKeyword)],
              undefined,
              ts.createIdentifier("mensagemService"),
              undefined,
              ts.createTypeReferenceNode(
                ts.createIdentifier("MensagemService"),
                undefined
              ),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PrivateKeyword)],
              undefined,
              ts.createIdentifier("tituloPaginaService"),
              undefined,
              ts.createTypeReferenceNode(
                ts.createIdentifier("TituloPaginaService"),
                undefined
              ),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PrivateKeyword)],
              undefined,
              ts.createIdentifier("formBuilder"),
              undefined,
              ts.createTypeReferenceNode(
                ts.createIdentifier("FormBuilder"),
                undefined
              ),
              undefined
            )
          ],
          ts.createBlock(
            [
              ts.createExpressionStatement(ts.createBinary(
                ts.createPropertyAccess(
                  ts.createThis(),
                  ts.createIdentifier("disabled")
                ),
                ts.createToken(ts.SyntaxKind.EqualsToken),
                ts.createFalse()
              )),
              ts.createExpressionStatement(ts.createBinary(
                ts.createPropertyAccess(
                  ts.createThis(),
                  ts.createIdentifier("cadastroForm")
                ),
                ts.createToken(ts.SyntaxKind.EqualsToken),
                ts.createCall(
                  ts.createPropertyAccess(
                    ts.createPropertyAccess(
                      ts.createThis(),
                      ts.createIdentifier("formBuilder")
                    ),
                    ts.createIdentifier("group")
                  ),
                  undefined,
                  [ts.createObjectLiteral(
                    [
                      ts.createPropertyAssignment(
                        ts.createIdentifier("inputTextoInicial"),
                        ts.createArrayLiteral(
                          [ts.createStringLiteral("Lorem ipsum dolor sit amet, consectetur adipiscing elit.")],
                          false
                        )
                      ),
                      ts.createPropertyAssignment(
                        ts.createIdentifier("inputTamanhoMaximo"),
                        ts.createArrayLiteral(
                          [],
                          false
                        )
                      ),
                      ts.createPropertyAssignment(
                        ts.createIdentifier("inputObrigatorio"),
                        ts.createArrayLiteral(
                          [ts.createNull()],
                          false
                        )
                      ),
                      ts.createPropertyAssignment(
                        ts.createIdentifier("inputComSufixo"),
                        ts.createArrayLiteral(
                          [],
                          false
                        )
                      ),
                      ts.createPropertyAssignment(
                        ts.createIdentifier("inputCaracterEspecial"),
                        ts.createArrayLiteral(
                          [],
                          false
                        )
                      ),
                      ts.createPropertyAssignment(
                        ts.createIdentifier("inputEmail"),
                        ts.createArrayLiteral(
                          [ts.createNull()],
                          false
                        )
                      )
                    ],
                    true
                  )]
                )
              ))
            ],
            true
          )
        ),
        ts.createMethod(
          undefined,
          undefined,
          undefined,
          ts.createIdentifier("ngOnInit"),
          undefined,
          undefined,
          [],
          undefined,
          ts.createBlock(
            [ts.createExpressionStatement(ts.createBinary(
              ts.createPropertyAccess(
                ts.createPropertyAccess(
                  ts.createThis(),
                  ts.createIdentifier("tituloPaginaService")
                ),
                ts.createIdentifier("titulo")
              ),
              ts.createToken(ts.SyntaxKind.EqualsToken),
              ts.createStringLiteral("Exemplo do componente Sk-Input Form Builder")
            ))],
            true
          )
        ),
        ts.createMethod(
          undefined,
          undefined,
          undefined,
          ts.createIdentifier("defineFormObject"),
          undefined,
          undefined,
          [],
          undefined,
          ts.createBlock(
            [ts.createReturn(ts.createCall(
              ts.createPropertyAccess(
                ts.createIdentifier("JSON"),
                ts.createIdentifier("stringify")
              ),
              undefined,
              [ts.createPropertyAccess(
                ts.createPropertyAccess(
                  ts.createThis(),
                  ts.createIdentifier("cadastroForm")
                ),
                ts.createIdentifier("value")
              )]
            ))],
            true
          )
        ),
        ts.createMethod(
          undefined,
          undefined,
          undefined,
          ts.createIdentifier("desabilitaInput"),
          undefined,
          undefined,
          [ts.createParameter(
            undefined,
            undefined,
            undefined,
            ts.createIdentifier("event"),
            undefined,
            undefined,
            undefined
          )],
          undefined,
          ts.createBlock(
            [ts.createExpressionStatement(ts.createBinary(
              ts.createPropertyAccess(
                ts.createThis(),
                ts.createIdentifier("disabled")
              ),
              ts.createToken(ts.SyntaxKind.EqualsToken),
              ts.createIdentifier("event")
            ))],
            true
          )
        ),
        ts.createMethod(
          undefined,
          undefined,
          undefined,
          ts.createIdentifier("submitForm"),
          undefined,
          undefined,
          [],
          undefined,
          ts.createBlock(
            [
              ts.createExpressionStatement(ts.createCall(
                ts.createPropertyAccess(
                  ts.createIdentifier("console"),
                  ts.createIdentifier("log")
                ),
                undefined,
                [ts.createPropertyAccess(
                  ts.createThis(),
                  ts.createIdentifier("cadastroForm")
                )]
              )),
              ts.createIf(
                ts.createPropertyAccess(
                  ts.createPropertyAccess(
                    ts.createThis(),
                    ts.createIdentifier("cadastroForm")
                  ),
                  ts.createIdentifier("valid")
                ),
                ts.createBlock(
                  [ts.createExpressionStatement(ts.createCall(
                    ts.createPropertyAccess(
                      ts.createPropertyAccess(
                        ts.createThis(),
                        ts.createIdentifier("mensagemService")
                      ),
                      ts.createIdentifier("mostrarToastSucesso")
                    ),
                    undefined,
                    [ts.createCall(
                      ts.createPropertyAccess(
                        ts.createIdentifier("JSON"),
                        ts.createIdentifier("stringify")
                      ),
                      undefined,
                      [ts.createPropertyAccess(
                        ts.createPropertyAccess(
                          ts.createThis(),
                          ts.createIdentifier("cadastroForm")
                        ),
                        ts.createIdentifier("value")
                      )]
                    )]
                  ))],
                  true
                ),
                ts.createBlock(
                  [ts.createExpressionStatement(ts.createCall(
                    ts.createPropertyAccess(
                      ts.createPropertyAccess(
                        ts.createThis(),
                        ts.createIdentifier("mensagemService")
                      ),
                      ts.createIdentifier("mostrarToastErro")
                    ),
                    undefined,
                    [ts.createStringLiteral("Verifique os dados!")]
                  ))],
                  true
                )
              )
            ],
            true
          )
        )
      ]
    )
  ];
  

const sourceFile = ts.createSourceFile('./test.ts', '', ts.ScriptTarget.ES3, true, ts.ScriptKind);

const printer = ts.createPrinter()

const file = printer.printList(ts.EmitHint.Expression, arrayInputDemo, sourceFile)

fs.writeFileSync('./output.ts', file)